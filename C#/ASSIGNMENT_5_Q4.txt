using System;
using System.Reflection;

[Serializable]
class StackException : Exception
{
    public StackException() : base()
    {
    }
    public StackException(string message) : base(message)
    {

    }
    public StackException(string message, Exception innerException) : base(message, innerException)
    {
    }
}
class MyStack<T> 
{
    public int c { get; set; }
    public T[] a { get; set; }
    public int top { get; set; }


    public MyStack()
    {
        this.top = -1;
        this.c = 4;
        this.a = new T[c];
    }

    public void push(T e)
    {
        if (top == c-1)
        {
            T[] b = new T[c];
            for(int i=0; i<c; i++)
            {
                b[i] = this.a[i];
            }
            this.c = (2 * this.c);
            this.a= new T[this.c];
            for(int i= 0; i < b.Length; i++)
            {
                a[i] = b[i];
            }   
        }
            top++;
            a[top] = e;
            Console.WriteLine("The item " + e + " inserted successfully");
    }
    public void pop()
    {
        try
        {
            if (top <= -1)
            {
                throw new StackException("Item can not be deleted.It is now empty");
                return;
            }
        }
        catch(StackException se)
        {
            Console.WriteLine(se);
            return;
        }
        top--;
        Console.WriteLine("The item is now deleted successfully");
    }
    public void show()
    {
        if (top <= -1)
        {
            Console.WriteLine("Nothing is there to be shown..");
            return;
        }
        Console.WriteLine("Available members");
        for (int i = 0; i <= top; i++)
        {
            Console.WriteLine(a[i]);
        }
    }
}
class MyClassForStack
{

    static void Main(string[] args)
    {
        Console.WriteLine("You have push() function to insert and push() function to delete");
        MyStack<int> s1 = new MyStack<int>();
        s1.push(12);
        s1.push(13);
        s1.push(14);
        s1.push(15);
        s1.push(16);
        s1.pop();
        s1.pop();
        s1.pop();
        s1.pop();
        s1.pop();
        s1.pop();
        s1.pop();
        s1.show();
        MyStack<string> s2 = new MyStack<string>();
        s2.push("abc");
        s2.push("bcd");
        s2.push("cde");
        s2.push("def");
        s2.push("efg");
        s2.pop();
        s2.pop();
        s2.pop();
        s2.show();
    }
}